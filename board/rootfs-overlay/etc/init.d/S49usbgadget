#!/bin/sh
#
# usbgadget        Configures usb0 interface
#

# Functions and constants in USBGADGET_SCRIPT
# Originally written by bishopdynamics
# Source: https://github.com/bishopdynamics/superbird-debian-kiosk/blob/main/files/data/scripts/setup_usbgad
# I (nd-0r) got sick of the configfs interface and kept running into weird pitfalls while
#   trying to configure CDC-ECM/RNDIS/ACM. So, I'm just using the g_ether module to 
#   create a pre-configured CDC-ECM/RNDIS gadget and setting up the usb0 interface here.
#
# In particular, I noticed that setting up a gadget with CDC-EEM (!), RNDIS, and ACM worked
#   on Linux, but not on MacOS. The interface would show up in the MacOS settings, but
#   pings failed with "host is down". Changing to CDC-ECM (!), RNDIS, and ACM would fail
#   when attaching the gadget to the UDC, maybe (?) because ACM can't be used with ECM, but
#   I couldn't find the root cause of the -19 return code in the driver sources. I couldn't
#   get NCM to work either.
#
# If you want to try to use configfs to do bigger and better things, maybe the commit
#   history for this file would be helpful.

######### Variables

USBNET_PREFIX="192.168.7"
# SERIAL_NUMBER="12345678"
# 18d1:4e40 Google Inc. Nexus 7
# ID_VENDOR="0x18d1"
# ID_PRODUCT="0x4e40"
# MANUFACTURER="Spotify"
# PRODUCT="Superduperbird"


# Research
#   starting point: https://github.com/frederic/superbird-bulkcmd/blob/main/scripts/enable-adb.sh.client
#   info about configfs https://elinux.org/images/e/ef/USB_Gadget_Configfs_API_0.pdf
#   info about usbnet and bridging https://developer.ridgerun.com/wiki/index.php/How_to_use_USB_device_netwo
#   more info, including for windows https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-ga
#   a gist that was helpful: https://gist.github.com/geekman/5bdb5abdc9ec6ac91d5646de0c0c60c4
#   https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt

######### Functions

create_gadget() {
        # create usb gadget device
        ID_VEND="$1"
        ID_PROD="$2"
        BCD_DEVICE="$3"
        BCD_USB="$4"
        MANUF="$5"
        PROD="$6"
        SERIAL="$7"
        echo "###  Creating gadget $ID_VEND $ID_PROD"

        mountpoint /sys/kernel/config/ || mount -t configfs none "/sys/kernel/config/"
        mkdir -p "/sys/kernel/config/usb_gadget/g1"
        echo "$ID_VEND" > "/sys/kernel/config/usb_gadget/g1/idVendor"
        echo "$ID_PROD" > "/sys/kernel/config/usb_gadget/g1/idProduct"
        echo "$BCD_DEVICE" > "/sys/kernel/config/usb_gadget/g1/bcdDevice"
        echo "$BCD_USB" > "/sys/kernel/config/usb_gadget/g1/bcdUSB"

        echo "###  Configuring device as $MANUF $PROD"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/strings/0x409"
        echo "$MANUF" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer"
        echo "$PROD" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/product"
        echo "$SERIAL" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber"
        sleep 1
}

add_config() {
        # configure usb gadget device
        CONFIG_NAME="$1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409"
        echo "$CONFIG_NAME" > "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409/configuration"
        echo 500 > "/sys/kernel/config/usb_gadget/g1/configs/c.1/MaxPower"
        ln -s "/sys/kernel/config/usb_gadget/g1/configs/c.1" "/sys/kernel/config/usb_gadget/g1/os_desc/c.1"
        sleep 1
}

add_function() {
        # add a function to existing config id
        FUNCTION_NAME="$1"
        echo "###  adding function $FUNCTION_NAME to config c.1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}"
        ln -s "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}" "/sys/kernel/config/usb_gadget/g1/configs/c.1"
}

attach_driver() {
        # attach the created gadget device to our UDC driver
        UDC_DEVICE=$(/bin/ls -1 /sys/class/udc/)  # ff400000.dwc2_a
        echo "###  Attaching gadget to UDC device: $UDC_DEVICE"
        echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
        sleep 1
}

configure_usbnet() {
        DEVICE="$1"
        NETWORK="$2"  # just the first 3 octets
        NETMASK="$3"
        DEFAULT="$4"

        echo "###  bringing up $DEVICE with ${NETWORK}.2"
        ip link set "$DEVICE" up
        ip address add "${NETWORK}.2/24" dev "$DEVICE"
        ip address add "169.254.1.1/16" dev "$DEVICE"

        echo "adding routes for $DEVICE"
        ip route add "$DEFAULT" via "${NETWORK}.1" dev "$DEVICE" # IPv4 route
        ip route add "169.254.0.0/16" dev "$DEVICE" # IPv4 link-local route for mDNS discovery

        echo "making sure you have a dns server"
        echo "nameserver 1.1.1.1" > /etc/resolv.conf

        sleep 1
}

shutdown_gadget() {
        # shutdown and clean up usb gadget and services
        #   ref: https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget/Usage_eq._to_g_ffs.ko
        NUM_CONFIGS="$1"
        echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
        for i in $(seq 1 "$NUM_CONFIGS"); do
                find "/sys/kernel/config/usb_gadget/g1/configs/c.${i}" -type l -exec unlink {} \;
                rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.${i}/strings/0x409"
                rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.${i}"
              done
        rm -r /sys/kernel/config/usb_gadget/g1/strings/0x409
        rm -r /sys/kernel/config/usb_gadget/g1/functions/*
        rm -r /sys/kernel/config/usb_gadget/g1/
}

start() {
        mkdir /config
        mount -t ext4 -o rw /dev/settings /config
        {
        echo "### Configuring usb0 network interface"
        # create_gadget "$ID_VENDOR" "$ID_PRODUCT" "0x0223" "0x0200" "$MANUFACTURER" "$PRODUCT" "$SERIAL_NUMBER"
        # add_config "Serial ACM Console"

        # add_function "rndis.usb0"  # rndis usb ethernet (must be first to get `usb0`)
        # add_function "ecm.usb1" # ecm usb ethernet (must be second to get `usb1`)
        # add_function "acm.gs0"  # acm usb serial

        # attach_driver

        # Source: https://www.kernel.org/doc/html/latest/usb/gadget-testing.html
        configure_usbnet "usb0" "$USBNET_PREFIX" "255.255.255.0" default
        # configure_usbnet "usb1" "$USBNET_ECM_PREFIX" "255.255.255.0"

        echo "Done setting up USB Gadget"

        echo "OK"
        } > /config/S49usbgadget.log 2>&1
        # dmesg > /config/kernel.log
        sync
}

stop() {
        printf "Shutting down gadget: "

        shutdown_gadget "1"

        echo "OK"
}

restart() {
        stop
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        restart
        ;;
  *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit $?
