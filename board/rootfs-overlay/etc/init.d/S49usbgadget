#!/bin/sh
#
# usbgadget        Enables rndis over usb.
#

# Functions and constants in USBGADGET_SCRIPT
# Originally written by bishopdynamics
# Source: https://github.com/bishopdynamics/superbird-debian-kiosk/blob/main/files/data/scripts/setup_usbgad
# I (nd-0r) just removed the adb functionality and added the EEM config

# Setup Linux USB Gadget for just rndis

# Available options:

# usb_f_rndis.ko
# usb_f_fs.ko
# usb_f_midi.ko
# usb_f_mtp.ko
# usb_f_ptp.ko
# usb_f_audio_source.ko
# usb_f_accessory.ko


######### Variables

USBNET_RNDIS_PREFIX="192.168.7"
USBNET_EEM_PREFIX="192.168.6"
SERIAL_NUMBER="12345678"
# 18d1:4e40 Google Inc. Nexus 7
ID_VENDOR="0x18d1"
ID_PRODUCT="0x4e40"
MANUFACTURER="Spotify"
PRODUCT="Superduperbird"


# Research
#   starting point: https://github.com/frederic/superbird-bulkcmd/blob/main/scripts/enable-adb.sh.client
#   info about configfs https://elinux.org/images/e/ef/USB_Gadget_Configfs_API_0.pdf
#   info about usbnet and bridging https://developer.ridgerun.com/wiki/index.php/How_to_use_USB_device_netwo
#   more info, including for windows https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-ga
#   a gist that was helpful: https://gist.github.com/geekman/5bdb5abdc9ec6ac91d5646de0c0c60c4
#   https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt

######### Functions

create_gadget() {
        # create usb gadget device
        ID_VEND="$1"
        ID_PROD="$2"
        BCD_DEVICE="$3"
        BCD_USB="$4"
        MANUF="$5"
        PROD="$6"
        SERIAL="$7"
        echo "###  Creating gadget $ID_VEND $ID_PROD"

        mountpoint /sys/kernel/config/ || mount -t configfs none "/sys/kernel/config/"
        mkdir -p "/sys/kernel/config/usb_gadget/g1"
        echo "$ID_VEND" > "/sys/kernel/config/usb_gadget/g1/idVendor"
        echo "$ID_PROD" > "/sys/kernel/config/usb_gadget/g1/idProduct"
        echo "$BCD_DEVICE" > "/sys/kernel/config/usb_gadget/g1/bcdDevice"
        echo "$BCD_USB" > "/sys/kernel/config/usb_gadget/g1/bcdUSB"

        echo "###  Configuring device as $MANUF $PROD"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/strings/0x409"
        echo "$MANUF" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/manufacturer"
        echo "$PROD" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/product"
        echo "$SERIAL" > "/sys/kernel/config/usb_gadget/g1/strings/0x409/serialnumber"
        sleep 1
}

add_config() {
        # configure usb gadget device
        CONFIG_NAME="$1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409"
        echo "$CONFIG_NAME" > "/sys/kernel/config/usb_gadget/g1/configs/c.1/strings/0x409/configuration"
        echo 500 > "/sys/kernel/config/usb_gadget/g1/configs/c.1/MaxPower"
        ln -s "/sys/kernel/config/usb_gadget/g1/configs/c.1" "/sys/kernel/config/usb_gadget/g1/os_desc/c.1"
        sleep 1
}

add_function() {
        # add a function to existing config id
        FUNCTION_NAME="$1"
        echo "###  adding function $FUNCTION_NAME to config c.1"
        mkdir -p "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}"
        ln -s "/sys/kernel/config/usb_gadget/g1/functions/${FUNCTION_NAME}" "/sys/kernel/config/usb_gadget/g1/configs/c.1"
}

attach_driver() {
        # attach the created gadget device to our UDC driver
        UDC_DEVICE=$(/bin/ls -1 /sys/class/udc/)  # ff400000.dwc2_a
        echo "###  Attaching gadget to UDC device: $UDC_DEVICE"
        echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
        sleep 1
}

configure_usbnet() {
        DEVICE="$1"
        NETWORK="$2"  # just the first 3 octets
        NETMASK="$3"
        echo "###  bringing up $DEVICE with ${NETWORK}.2"
        ifconfig "$DEVICE" up
        ifconfig "$DEVICE" "${NETWORK}.2" netmask "$NETMASK" broadcast "${NETWORK}.255"
        echo "adding routes for $DEVICE"
        ip route add default via "${NETWORK}.1" dev "$DEVICE"
        echo "making sure you have a dns server"
        echo "nameserver 1.1.1.1" > /etc/resolv.conf
        sleep 1
}

shutdown_gadget() {
        # shutdown and clean up usb gadget and services
        #   ref: https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget/Usage_eq._to_g_ffs.ko
        NUM_CONFIGS="$1"
        echo "$UDC_DEVICE" > /sys/kernel/config/usb_gadget/g1/UDC
        for i in $(seq 1 "$NUM_CONFIGS"); do
                find "/sys/kernel/config/usb_gadget/g1/configs/c.${i}" -type l -exec unlink {} \;
                rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.${i}/strings/0x409"
                rm -r "/sys/kernel/config/usb_gadget/g1/configs/c.${i}"
              done
        rm -r /sys/kernel/config/usb_gadget/g1/strings/0x409
        rm -r /sys/kernel/config/usb_gadget/g1/functions/*
        rm -r /sys/kernel/config/usb_gadget/g1/
}

start() {
        echo "### Configuring USB Gadget with Ethernet and RNDIS"
        create_gadget "$ID_VENDOR" "$ID_PRODUCT" "0x0223" "0x0200" "$MANUFACTURER" "$PRODUCT" "$SERIAL_NUMBER"
        add_config "Multi-Function Device"

        add_function "rndis.usb0"  # rndis usb ethernet (must be first to get `usb0`)
        # add_function "eem.usb1" # eem usb ethernet (must be second to get `usb1`)
        # add_function "acm.usb0"  # acm usb serial

        attach_driver

        # Interface names are assigned pattern `usb%d` by default. As far as I can tell,
        #  there is not a way to hardcode the index, so this relies on the kernel choosing
        #  `usb0` first and `usb1` second.
        # Source: https://www.kernel.org/doc/html/latest/usb/gadget-testing.html
        configure_usbnet "usb0" "$USBNET_RNDIS_PREFIX" "255.255.255.0"
        # configure_usbnet "usb1" "$USBNET_EEM_PREFIX" "255.255.255.0"

        echo "Done setting up USB Gadget"

        echo "OK"
}

stop() {
        printf "Shutting down gadget: "

        shutdown_gadget "1"

        echo "OK"
}

restart() {
        stop
        start
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        restart
        ;;
  *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit $?
